.. include:: <s5defs.txt>

=========
How I Git
=========

:Author: Peter Parente
:Date: 2010-09-10

.. footer:: UNC Open Web

What is Git?
============

.. image:: images/git.jpg
   :height: 250px
   :align: right

.. class:: incremental

* A distributed version control system
* A toolkit for dealing with changes
* A bunch of command line utilities

Why do I like git?
==================

.. image:: images/git-zazzle.jpg
   :align: right
   :height: 250px

.. class:: incremental

* I need some form of version control
* Staging and branching fit my style
* It has that Unix feel
* GitHub is a great service

$ -> ()-:
=========

.. class:: incremental

* I'm working on a large JS code base
* I have to find and fix a bug
* I strew ``console.log`` everywhere to find it
* I fix the problem
* Now I want to share my fixes with my team

.. class:: incremental
.. class:: tiny

Psst. Put my money where my mouth is.

Lingo: Local repository
=======================

.. image:: images/flow2.png
   :height: 500
   :align: center
   :alt: A local repository contains data plus its history on the local machine

Lingo: Remote repository
========================

.. image:: images/flow3.png
   :height: 500
   :align: center
   :alt: Remote repositories are equivalent to local ones, but reside on remote machines

Lingo: Working copy
===================

.. image:: images/flow4.png
   :height: 500
   :align: center
   :alt: The working copy is the data you edit

Lingo: Stage
============

.. image:: images/flow5.png
   :height: 500
   :align: center
   :alt: The stage is where you indicate what working copy changes will become permanent

Lingo: Commit
=============

.. image:: images/flow6.png
   :height: 500
   :align: center
   :alt: A commit is a set of permanent changes

Lingo: Commit history
=====================

.. image:: images/flow7.png
   :height: 500
   :align: center
   :alt: The commit history links commits to one or more parents

Lingo: Branch
=============

.. image:: images/flow8.png
   :height: 500
   :align: center
   :alt: A branch is a linear commit history

Lingo: Branches
===============

.. image:: images/flow9.png
   :height: 500
   :align: center
   :alt: A repository can contain a tree of branches

Lingo: To stage
===============

.. image:: images/flow10.png
   :height: 500
   :align: center
   :alt: To mark changes as candidates for the next commits

Lingo: To commit
================

.. image:: images/flow11.png
   :height: 500
   :align: center
   :alt: To make staged changes permanent

Lingo: To branch
================

.. image:: images/flow12.png
   :height: 500
   :align: center
   :alt: To create a new branch with the current commit as its parent

Lingo: To merge
===============

.. image:: images/flow13.png
   :height: 500
   :align: center
   :alt: To join to two branches

Lingo: To fetch
===============

.. image:: images/flow14.png
   :height: 500
   :align: center
   :alt: To get updates from a remote repository

Lingo: To push
==============

.. image:: images/flow15.png
   :height: 500
   :align: center
   :alt: To send local branch commits to a remote repository

How I git started
=================

.. image:: images/buzz-lightyear.jpg
   :height: 250px
   :align: right

.. class:: incremental

#. I install git on my machine
#. I set my git configuration
#. I create or clone a repository

Install git
===========

.. class:: incremental

* Did you do it?
* See http://help.github.com/

Configure git
=============

.. class:: incremental

* Edit ~/.gitconfig
* Set at least your name and email address
* See http://gist.github.com/563331 for my .gitconfig

Create a repository
===================

.. class:: incremental

* Make a project folder::

   mkdir my_project

* Make the folder a repository::   

   git init

Clone an existing repository
============================

.. class:: incremental

* Clone a remote repository in a local folder::

   git clone <URL> <folder>

* Clone the read/write tutorial repository::
   
   git clone git@github.com:uncopenweb/how-i-git.git

* Clone the read-only repository::

   git clone git://github.com/uncopenweb/how-i-git.git

How I use git daily
===================

.. image:: images/coding.png
   :height: 150px
   :align: right

.. class:: incremental

#. I write code
#. I stage chunks of code
#. I commit to *master* branch

Stage some changes
==================

.. class:: incremental

* Mark a whole file as part of a commit::

   git add <file>

* Unmark a file as part of a commit::

   git remove <file> --cached
   
* Mark / unmark chunks interactively::

   git add -i

Stage some changes [2]
======================

.. class:: incremental

* Check the status of the stage::

   git status

* Many next steps noted in the output
* Read the text!

Commit my changes
=================

.. class:: incremental

* Commit staged changes:: 

   git commit
   
* Enter a description of the commit when prompted

* View the history of commits::

   git log

How I share code on GitHub
==========================

.. image:: images/github.png
   :align: right
   :height: 150px

.. class:: incremental

#. I register for an account on GitHub
#. I fetch commits from GitHub
#. I push my commits to GitHub
#. I merge remote changes into *master*

Register on GitHub
==================

.. image:: images/github.png
   :align: right
   :height: 150px

.. class:: incremental

* GitHub provides free OSS hosting
* Register for an account
* Generate a keypair
* Register the keypair with GitHub
* Again, see http://help.github.com/

Fetch remote changes
====================

.. class:: incremental

* Show remote repositories::

   git remote show
   
* Get info about a remote repository::

   git remote show <remote alias>

* Get an update of what happened remotely::

   git fetch <remote alias>

Merge remote changes
====================

* Merge remote commits into a local branch::

   git merge <remote alias>/<branch>

Push local changes
==================

* Send local commits to a remote branch::

   git push <remote alias> <branch>

How I work on "features"
========================

.. image:: images/feature.jpg
   :height: 250px
   :align: right

.. class:: incremental

#. I create a local branch
#. I code, stage, commit in the branch
#. I switch to other branches as needed
#. I merge the branch into *master* when "done"
#. I might push a branch to GitHub
#. I might track a branch on GitHub

Create a new branch
===================

.. class:: incremental

* Start a local branch for a separate line of work::

   git checkout -b <branch>

* Commands operate on the new *active branch*

Switch to a branch
==================

.. class:: incremental

* List available branches::

   git branch -a

* Make a branch active::

   git checkout <branch>
   
* Working copy reflects the latest commit on the branch
* Commands operate on the activated branch

Merge branches
==============

* Merge a local branch into the active branch::

   git merge <branch>

Track a remote branch
=====================

.. class:: incremental

* Start a local copy of a remote branch::

   git branch --track <remote alias> <branch>

* Stage, commit, push, fetch, etc. to the local branch
* Fetch, merge and push between your local branch and the remote

How I deal with problems
========================

.. image:: images/css.jpg
   :height: 250px
   :align: right

.. class:: incremental

#. I reset my working copy
#. I amend the last commit
#. I undo the last commit
#. I resolve conflicts during merge
#. I fetch and merge before I push
#. I stash incomplete work before remote ops

Reset the working copy
======================

.. class:: incremental

* Revert all uncommitted changes::

   git reset --hard HEAD

* **Warning**: You cannot undo this action!

Amend the last commit
=====================

.. class:: incremental

* Stage chunks to commit
* Commit the staged chunks plus those from the last commit::

   git commit --amend

* Replaces the last commit with one containing all chunks
* **Warning**: Don't do this if you already pushed the commit!

Undo the last commit
====================

.. class:: incremental

* Remove the last commit from the history
* Leave the changes in the working copy::

   git reset --soft HEAD 

Deal with merge conflicts
=========================

.. class:: incremental

* Developers can commit changes at the same time
* git can merge many concurrent changes automatically
* git needs human help when changes overlap

Deal with merge conflicts [2]
=============================

.. class:: incremental

* Look at the merge error message
* Open the files with conflicts in an editor
* Search for ====
* Keep the desired lines of code
* Use *git add* to stage the fixes
* Use *git commit* to finish the merge

Deal with push errors
=====================

* Push fails if the local branch is out of date
* Bring the local branch up to date::

   git fetch <remote alias>
   git merge <remote alias>/<branch>

How I roll
==========

.. class:: incremental

* I use `GitX`__ for add/remove, commit, log (frequent)
* I use the command line for fetch, merge, branch (rare)
* I write shell scripts to automate push and fetch (rarer)

__ http://github.com/brotherbard/gitx/downloads

Other features I use
====================

.. class:: incremental

* Multiple remotes
* bash integration
* pull
* rebase
* git-svn
* gitgui, gitk, GitX (Mac)

Links
=====

* `Git workflow and cheat sheet`__
* `$ cheat git`__
* `Git for computer scientists`__
* `git ready`__

__ http://www.markus-gattol.name/misc/mm/si/content/git_workflow_and_cheat_sheet.png
__ http://cheat.errtheblog.com/s/git
__ http://eagain.net/articles/git-for-computer-scientists/
__ http://www.gitready.com/