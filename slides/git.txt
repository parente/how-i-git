.. include:: <s5defs.txt>

=========
How I Git
=========

:Author: Peter Parente
:Date: 2010-09-10

.. footer:: UNC Open Web

What is Git?
============

.. class:: incremental

* A distributed version control system
* A toolkit for dealing with changes
* A bunch of command line utilities

Why do I like git?
==================

.. class:: incremental

* Staging is useful
* Local branching is fast
* It has that Unix feel
* github is great

Lingo: Nouns
============

.. class:: incremental

* working copy
* stage
* commit
* branch
* repository
* *master* branch
* *origin* remote

Lingo: Verbs
============

.. class:: incremental

* to stage
* to commit
* to branch
* to push
* to fetch
* to merge

How I git started
=================

.. class:: incremental

#. I install git on my machine
#. I set my git configuration
#. I create or clone a repository

Install git
===========

.. class:: incremental

* Did you do it?
* See http://help.github.com/

Configure git
=============

.. class:: incremental

* Edit ~/.gitconfig
* Set at least your name and email address
* See http://gist.github.com/563331 for my .gitconfig

Create a repository
===================

.. class:: incremental

* Make a project folder::

   mkdir my_project

* Make the folder a repository::   

      git init

Clone an existing repository
============================

.. class:: incremental

* Clone the repository at URL in local folder::

   git clone <URL> <folder>

* Clone the repository for this tutorial::
   
   git clone git@github.com:parente/how-i-git.git

How I use git daily
===================

.. class:: incremental

#. I write code
#. I stage chunks of code
#. I commit to branch "master"
#. GOTO 1

Stage some changes
==================

.. class:: incremental

* Add all changes in a file::

   git add <file>

* Remove all changes in a file::

   git remove <file>

* Add chunks interactively::

   git add -i

Commit my changes
=================

.. class:: incremental

* Commit staged changes:: 

   git commit
   
* Enter a description of the commit when prompted

How I share code on github
==========================

.. class:: incremental

#. I register for an account on github
#. I fetch commits from github
#. I push my commits to github
#. I merge remote changes into *master*

Register on github
==================

* github provides free hosting for code repositories
* Register for an account
* Generate a keypair
* Register the keypair with github
* Again, see http://help.github.com/

Fetch changes from a remote repository
======================================

.. class:: incremental

* Show remote repositories::

   git remote show
   
* Get info about a remote repository::

   git remote show <remote alias>

* Get an update of what happened remotely::

   git fetch <remote alias>

Merge remote changes
====================

.. class:: incremental

* Merge remote commits into a local branch::

   git merge <remote alias>/<branch>

Push commits to a remote repository
===================================

.. class:: incremental

* Send local commits to a remote branch::

   git push <remote alias> <branch>

How I work on "big" features
============================

#. I switch to a local branch
#. I create a local branch
#. I code, stage, commit in the branch
#. I switch to other branches as needed
#. I merge the branch into *master* when "done"
#. I might push a branch to github
#. I might track a branch on github

Switch to a branch
==================

.. class:: incremental

* List available branches::

   git branch -a

* Switch the working copy to an existing local branch::

   git checkout <branch>
   
* Stage, commit, push, fetch, etc. operate on the active branch

Create a new branch
===================

.. class:: incremental

* Start a local branch for a separate line of work::

   git checkout -b <branch>

Merge branches
==============

.. class:: incremental

* Merge a local branch into the active branch::

   git merge <branch>

Track a remote branch
=====================

.. class:: incremental

* Start a local copy of a remote branch::

   git branch --track <remote alias> <branch>

* Stage, commit, push, fetch, etc. to the local branch
* Fetch, merge and push between your local branch and the remote

How I deal with problems
========================

* I reset my working copy
* I amend the last commit
* I undo the last commit
* I resolve conflicts during merge
* I fetch and merge before I push
* I stash incomplete work before remote ops

Reset the working copy
======================

.. class:: incremental

* Revert all uncommitted changes::

   git reset --hard HEAD

* **Warning**: You cannot undo this action!

Amend the last commit
=====================

.. class:: incremental

* Stage chunks to commit
* Commit the staged chunks plus those from the last commit::

   git commit --amend

* Replaces the last commit with one containing all chunks
* **Warning**: Don't do this if you already pushed the commit!

Undo the last commit
====================

.. class:: incremental

* Remove the last commit from the history
* Apply the changes to the working copy

   git reset --soft HEAD 

Deal with merge conflicts
=========================

.. class:: incremental

* Many people can commit changes at the same time
* git usually handles changes in the same files automatically
* git needs human help when changes overlap

Deal with merge conflicts [2]
=============================

.. class:: incremental

* Look at the merge error message
* Open the files with conflicts in an editor
* Search for ====
* Keep the desired lines of code
* Use *git add* to stage the fixes
* Use *git commit* to finish the merge

Deal with push errors
=====================

.. class:: incremental

* Push fails if the local branch is out of date::

   git fetch <remote alias>
   git merge <remote alias>/<branch>

Do I really do all this typing?
===============================

.. class:: incremental

* Heck no!
* I use `GitX`__ for add/remove, commit, log (frequent)
* I use the command line for fetch, merge, branch (rare)
* I write shell scripts to automate push and fetch (rarer)

__ http://github.com/brotherbard/gitx/downloads

Other features I use
====================

.. class:: incremental

* Multiple remotes
* bash integration
* pull
* rebase
* git-svn
* gitgui, gitk, GitX (Mac)

Links
=====

* `Git workflow and cheat sheet`__
* `$ cheat git`__
* `Git for computer scientists`__

__ http://www.markus-gattol.name/misc/mm/si/content/git_workflow_and_cheat_sheet.png
__ http://cheat.errtheblog.com/s/git
__ http://eagain.net/articles/git-for-computer-scientists/